#!/bin/bash
# filepath: /Users/stuartholmberg/Documents/Fiverr_Juicy/spotify-auth-test/soulpull

# Spotify Soul Extraction CLI Wrapper
# A sophisticated bash interface for the Spotify Soul extraction tools
# Author: Your Name
# Version: 2.0

set -euo pipefail  # Exit on error, undefined vars, pipe failures

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DATA_DIR="$SCRIPT_DIR/data"
RAW_DATA_DIR="$DATA_DIR/raw"
PROCESSED_DATA_DIR="$DATA_DIR/processed"
ANALYTICS_DIR="$SCRIPT_DIR/analytics"
LOG_FILE="$SCRIPT_DIR/soulpull.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Print colored output
print_status() {
    echo -e "${GREEN}✅ $1${NC}"
    log "SUCCESS: $1"
}

print_error() {
    echo -e "${RED}❌ $1${NC}" >&2
    log "ERROR: $1"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
    log "WARNING: $1"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
    log "INFO: $1"
}

print_header() {
    echo -e "${PURPLE}"
    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
    echo "║                      🎵 SPOTIFY SOUL EXTRACTION CLI 🎵                      ║"
    echo "║                           Advanced Music Analytics                           ║"
    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

# Setup directories
setup_directories() {
    mkdir -p "$DATA_DIR" "$RAW_DATA_DIR" "$PROCESSED_DATA_DIR" "$ANALYTICS_DIR"
    print_info "Directory structure initialized"
}

# Check dependencies
check_dependencies() {
    local missing_deps=()
    
    # Check Python
    if ! command -v python3 &> /dev/null; then
        missing_deps+=("python3")
    fi
    
    # Check required Python packages
    if ! python3 -c "import spotipy" &> /dev/null; then
        missing_deps+=("spotipy (pip install spotipy)")
    fi
    
    if ! python3 -c "import dotenv" &> /dev/null; then
        missing_deps+=("python-dotenv (pip install python-dotenv)")
    fi
    
    # Check .env file
    if [[ ! -f "$SCRIPT_DIR/.env" ]]; then
        missing_deps+=(".env file with Spotify credentials")
    fi
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        print_error "Missing dependencies:"
        for dep in "${missing_deps[@]}"; do
            echo "  • $dep"
        done
        exit 1
    fi
    
    print_info "All dependencies satisfied"
}

# Find latest data file
find_latest_data_file() {
    local latest_file
    latest_file=$(find "$RAW_DATA_DIR" -name "spotify_soul_data_*.json" -type f 2>/dev/null | sort -r | head -n1)
    
    if [[ -z "$latest_file" ]]; then
        # Fallback to old location for backwards compatibility
        if [[ -f "path/raw_soul_data.json" ]]; then
            echo "path/raw_soul_data.json"
        elif [[ -f "spotify-soul/raw_soul_data.json" ]]; then
            echo "spotify-soul/raw_soul_data.json"
        else
            echo ""
        fi
    else
        echo "$latest_file"
    fi
}

# Extract soul data
extract_soul() {
    print_header
    print_info "Starting soul extraction process..."
    
    check_dependencies
    setup_directories
    
    # Check if extraction script exists
    if [[ -f "$SCRIPT_DIR/spotify_soul_extraction_base.py" ]]; then
        print_info "Running advanced extraction script..."
        if python3 "$SCRIPT_DIR/spotify_soul_extraction_base.py"; then
            print_status "Soul extraction completed successfully!"
            
            # Show extraction summary if available
            local summary_file
            summary_file=$(find "$RAW_DATA_DIR" -name "summary_*.txt" -type f | sort -r | head -n1)
            if [[ -n "$summary_file" && -f "$summary_file" ]]; then
                echo -e "\n${CYAN}📊 EXTRACTION SUMMARY:${NC}"
                cat "$summary_file"
            fi
        else
            print_error "Soul extraction failed!"
            exit 1
        fi
    elif [[ -f "$SCRIPT_DIR/soulpull.py" ]]; then
        print_info "Running Python extraction script..."
        if python3 "$SCRIPT_DIR/soulpull.py" --extract; then
            print_status "Soul extraction completed!"
        else
            print_error "Soul extraction failed!"
            exit 1
        fi
    else
        print_error "No extraction script found!"
        print_info "Available scripts should be:"
        print_info "  • spotify_soul_extraction_base.py (advanced)"
        print_info "  • soulpull.py (basic)"
        exit 1
    fi
}

# Read soul data
read_soul() {
    print_header
    print_info "Reading extracted soul data..."
    
    local data_file
    data_file=$(find_latest_data_file)
    
    if [[ -z "$data_file" ]]; then
        print_error "No soul data found!"
        print_info "Run 'soulpull --extract' first to extract your data"
        exit 1
    fi
    
    if [[ ! -f "$data_file" ]]; then
        print_error "Data file not found: $data_file"
        exit 1
    fi
    
    print_info "Reading data from: $(basename "$data_file")"
    
    # Check if jq is available for pretty printing
    if command -v jq &> /dev/null; then
        print_info "Pretty printing JSON data..."
        jq '.' "$data_file"
    else
        print_warning "jq not found, displaying raw JSON (install jq for better formatting)"
        cat "$data_file"
    fi
    
    # Show file stats
    local file_size
    file_size=$(stat -f%z "$data_file" 2>/dev/null || stat -c%s "$data_file" 2>/dev/null || echo "unknown")
    print_info "File size: $file_size bytes"
    print_status "Soul data displayed successfully!"
}

# Process and analyze data
analyze_soul() {
    print_header
    print_info "Analyzing soul data..."
    
    local data_file
    data_file=$(find_latest_data_file)
    
    if [[ -z "$data_file" || ! -f "$data_file" ]]; then
        print_error "No soul data found for analysis!"
        print_info "Run 'soulpull --extract' first"
        exit 1
    fi
    
    # Check if advanced analysis script exists
    if [[ -f "$SCRIPT_DIR/soulpull.py" ]]; then
        print_info "Running advanced analysis..."
        if python3 "$SCRIPT_DIR/soulpull.py" --ritual; then
            print_status "Soul analysis completed!"
        else
            print_error "Soul analysis failed!"
            exit 1
        fi
    else
        print_warning "Advanced analysis script not found"
        print_info "Basic data reading only..."
        read_soul
    fi
}

# Backup data
backup_soul() {
    print_header
    print_info "Creating soul data backup..."
    
    local data_file
    data_file=$(find_latest_data_file)
    
    if [[ -z "$data_file" || ! -f "$data_file" ]]; then
        print_error "No soul data found to backup!"
        exit 1
    fi
    
    local backup_dir="$SCRIPT_DIR/backups"
    mkdir -p "$backup_dir"
    
    local timestamp
    timestamp=$(date +"%Y%m%d_%H%M%S")
    local backup_file="$backup_dir/soul_backup_$timestamp.json"
    
    if cp "$data_file" "$backup_file"; then
        print_status "Backup created: $(basename "$backup_file")"
        print_info "Backup location: $backup_file"
    else
        print_error "Failed to create backup!"
        exit 1
    fi
}

# Show system status
show_status() {
    print_header
    
    echo -e "${CYAN}📊 SYSTEM STATUS${NC}"
    echo "════════════════"
    
    # Check directories
    echo "📁 Directory Structure:"
    for dir in "$DATA_DIR" "$RAW_DATA_DIR" "$PROCESSED_DATA_DIR" "$ANALYTICS_DIR"; do
        if [[ -d "$dir" ]]; then
            local file_count
            file_count=$(find "$dir" -type f | wc -l)
            echo "  ✅ $(basename "$dir"): $file_count files"
        else
            echo "  ❌ $(basename "$dir"): not found"
        fi
    done
    
    echo
    
    # Check data files
    echo "🎵 Data Files:"
    local data_file
    data_file=$(find_latest_data_file)
    if [[ -n "$data_file" && -f "$data_file" ]]; then
        local file_age
        if command -v stat &> /dev/null; then
            if stat -f%Sm "$data_file" &> /dev/null; then
                # macOS
                file_age=$(stat -f%Sm "$data_file")
            else
                # Linux
                file_age=$(stat -c%y "$data_file")
            fi
        else
            file_age="unknown"
        fi
        echo "  ✅ Latest: $(basename "$data_file")"
        echo "     Created: $file_age"
    else
        echo "  ❌ No data files found"
    fi
    
    echo
    
    # Check scripts
    echo "🔧 Available Scripts:"
    for script in "spotify_soul_extraction_base.py" "soulpull.py" "server.py"; do
        if [[ -f "$SCRIPT_DIR/$script" ]]; then
            echo "  ✅ $script"
        else
            echo "  ❌ $script"
        fi
    done
    
    echo
    print_status "Status check completed!"
}

# Show usage information
show_usage() {
    print_header
    
    echo -e "${CYAN}🚀 USAGE GUIDE${NC}"
    echo "═══════════════"
    echo
    echo -e "${YELLOW}Basic Operations:${NC}"
    echo "  soulpull --extract     🎵 Extract your soul from Spotify"
    echo "  soulpull --read        📖 Display extracted soul data"
    echo "  soulpull --analyze     🧠 Perform advanced analysis"
    echo "  soulpull --backup      💾 Create backup of current data"
    echo
    echo -e "${YELLOW}System Commands:${NC}"
    echo "  soulpull --status      📊 Show system status"
    echo "  soulpull --help        ❓ Show this help message"
    echo
    echo -e "${YELLOW}Examples:${NC}"
    echo "  # Complete workflow"
    echo "  soulpull --extract && soulpull --analyze"
    echo
    echo "  # Backup before new extraction"
    echo "  soulpull --backup && soulpull --extract"
    echo
    echo -e "${BLUE}💡 Tip: Run 'soulpull --status' to check your setup${NC}"
}

# Main script logic
main() {
    # Create log file
    touch "$LOG_FILE"
    log "=== Soulpull CLI Started ==="
    
    if [[ $# -eq 0 ]]; then
        show_usage
        exit 0
    fi
    
    case "$1" in
        --extract|-e)
            extract_soul
            ;;
        --read|-r)
            read_soul
            ;;
        --analyze|-a)
            analyze_soul
            ;;
        --backup|-b)
            backup_soul
            ;;
        --status|-s)
            show_status
            ;;
        --help|-h|help)
            show_usage
            ;;
        *)
            print_error "Unknown command: $1"
            echo
            show_usage
            exit 1
            ;;
    esac
    
    log "=== Soulpull CLI Finished ==="
}

# Run main function
main "$@"